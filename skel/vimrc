set nocompatible              " be iMproved, required
filetype off                  " required

" A lot of this file was made using https://github.com/amix/vimrc
" as a starting point.

filetype plugin indent on    " required

" Set to auto read when a file is changed from the outside
set autoread
" au FocusGained,BufEnter * checktime
" the following is better https://vi.stackexchange.com/questions/14315/how-can-i-tell-if-im-in-the-command-window
" (also https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim)
autocmd FocusGained,BufEnter * if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif
" if that's not enough, uncomment the following line:
"au CursorHold,CursorHoldI * checktime

"Always show current position
set ruler

" Ignore case when searching
set ignorecase
" If you actually want to search case (in)sensitive, use \C (\c)

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Alternatively instead of the above, toggle highlighting only while searching
"augroup vimrc-incsearch-highlight
"  autocmd!
"  autocmd CmdlineEnter /,\? :set hlsearch
"  autocmd CmdlineLeave /,\? :set nohlsearch
"augroup END

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

set ai "Auto indent
set si "Smart indent
"set wrap "Wrap lines
set nowrap
"set linebreak "Soft wrap
set number "Line numbers

set hidden "Make it so you can switch buffers after making changes
           "(but not saving those changes)


""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Smart way to move between windows
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

map ]b :bnext<cr>
map [b :bprevious<cr>

"""""""" Break indent
" enable indentation
"set breakindent

" ident by an additional 2 characters on wrapped lines, when line >= 40 characters, put 'showbreak' at start of line
"set breakindentopt=shift:2,min:40,sbr

" append '>>' to indent
"set showbreak=>>
""""""""""""""""""

" No bells
autocmd! GUIEnter * set vb t_vb=

" toggle highlighting
:nnoremap <silent><expr> <Leader>h (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"

set showcmd             " display incomplete commands
set wildmenu            " display completion matches in a status line

" gq will wrap to textwidth, and wrapping won't happen automatically
set textwidth=70
set formatoptions-=t

set backspace=indent,eol,start

" jump to the last place in a file when you open it again
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" change the working directory to the directory containing the current
" file
nnoremap <leader>cd :lcd %:p:h<CR>

" Change windows size with hjklHJKL
function ResizeWindowWithMovementKeys()
  let l:msg = "Resize the current window with hjklHJKL. Quit with any other key."
  echo l:msg
  let l:hcode = char2nr("h")
  let l:jcode = char2nr("j")
  let l:kcode = char2nr("k")
  let l:lcode = char2nr("l")
  let l:Hcode = char2nr("H")
  let l:Jcode = char2nr("J")
  let l:Kcode = char2nr("K")
  let l:Lcode = char2nr("L")
  let l:user_code = getchar()
  while l:user_code == l:hcode || 
      \ l:user_code == l:jcode ||
      \ l:user_code == l:kcode ||
      \ l:user_code == l:lcode ||
      \ l:user_code == l:Hcode || 
      \ l:user_code == l:Jcode ||
      \ l:user_code == l:Kcode ||
      \ l:user_code == l:Lcode
    if l:user_code == l:hcode
      vertical resize -1
    elseif l:user_code == l:jcode
      resize -1
    elseif l:user_code == l:kcode
      resize +1
    elseif l:user_code == l:lcode
      vertical resize +1
    elseif l:user_code == l:Hcode
      vertical resize -4
    elseif l:user_code == l:Jcode
      resize -4
    elseif l:user_code == l:Kcode
      resize +4
    elseif l:user_code == l:Lcode
      vertical resize +4
    endif
    redraw!
    let l:user_code = getchar()
  endwhile
  echo ""
endfunction
nnoremap <leader>re :call ResizeWindowWithMovementKeys()<CR>

"set cursorline
set mouse=a

"Open new split panes to right and bottom, which feels more natural than Vimâ€™s default:
set splitbelow
set splitright

colorscheme torte

""""""""""""""""""""""""
" oscyank stuff
" copied from https://github.com/ojroques/vim-oscyank/blob/main/plugin/oscyank.vim
""""""""""""""""""""""""
if exists('g:loaded_oscyank') || &compatible
  finish
endif

let g:loaded_oscyank = 1

" Send a string to the terminal's clipboard using OSC52.
function! OSCYankString(str)
  let length = strlen(a:str)
  let limit = get(g:, 'oscyank_max_length', 100000)
  let osc52_key = 'default'

  if length > limit
    echohl WarningMsg
    echo '[oscyank] Selection has length ' . length . ', limit is ' . limit
    echohl None
    return
  endif

  if exists('g:oscyank_term')  " Explicitly use a supported terminal.
    let osc52_key = get(g:, 'oscyank_term')
  else  " Fallback to auto-detection.
    if !empty($TMUX)
      let osc52_key = 'tmux'
    elseif match($TERM, 'screen') > -1
      let osc52_key = 'screen'
    elseif match($TERM, 'kitty') > -1
      let osc52_key = 'kitty'
    endif
  endif

  let osc52 = get(s:osc52_table, osc52_key, s:osc52_table['default'])(a:str)
  call s:raw_echo(osc52)

  if !get(g:, 'oscyank_silent', 0)
    echo '[oscyank] ' . length . ' characters copied'
  endif
endfunction

" Send the visual selection to the terminal's clipboard using OSC52.
" https://stackoverflow.com/questions/1533565/how-to-get-visually-selected-text-in-vimscript
function! OSCYankVisual() range
  let [line_start, column_start] = getpos("'<")[1:2]
  let [line_end, column_end] = getpos("'>")[1:2]

  let lines = getline(line_start, line_end)
  if len(lines) == 0
    return ''
  endif

  let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][column_start - 1:]

  call OSCYankString(join(lines, "\n"))
  execute "normal! `<"
endfunction

" Send the input text object to the terminal's clipboard using OSC52.
function! OSCYankOperator(type, ...) abort
  " Special case: if the user _has_ explicitly specified a register (or
  " they've just supplied one of the possible defaults), OSCYank its contents.
  if !(v:register ==# '"' || v:register ==# '*' || v:register ==# '+')
    call OSCYankString(getreg(v:register))
    return ''
  endif

  " Otherwise, do the usual operator dance (see `:help g@`).
  if a:type == ''
    set opfunc=OSCYankOperator
    return 'g@'
  endif

  let [line_start, column_start] = getpos("'[")[1:2]
  let [line_end, column_end] = getpos("']")[1:2]

  let lines = getline(line_start, line_end)
  if len(lines) == 0
    return ''
  endif

  if a:type ==# "char"
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
  endif

  call OSCYankString(join(lines, "\n"))
endfunction

" This function base64's the entire string and wraps it in a single OSC52.
" It's appropriate when running in a raw terminal that supports OSC 52.
function! s:get_OSC52(str)
  let b64 = s:b64encode(a:str, 0)
  return "\e]52;c;" . b64 . "\x07"
endfunction

" This function base64's the entire string and wraps it in a single OSC52 for
" tmux.
" This is for `tmux` sessions which filters OSC52 locally.
function! s:get_OSC52_tmux(str)
  let b64 = s:b64encode(a:str, 0)
  return "\ePtmux;\e\e]52;c;" . b64 . "\x07\e\\"
endfunction

" This function base64's the entire source, wraps it in a single OSC52, and then
" breaks the result into small chunks which are each wrapped in a DCS sequence.
" This is appropriate when running on `screen`. Screen doesn't support OSC52,
" but will pass the contents of a DCS sequence to the outer terminal unchanged.
" It imposes a small max length to DCS sequences, so we send in chunks.
function! s:get_OSC52_DCS(str)
  let b64 = s:b64encode(a:str, 76)
  " Remove the trailing newline.
  let b64 = substitute(b64, '\n*$', '', '')
  " Replace each newline with an <end-dcs><start-dcs> pair.
  let b64 = substitute(b64, '\n', "\e/\eP", "g")
  " (except end-of-dcs is "ESC \", begin is "ESC P", and I can't figure out
  " how to express "ESC \ ESC P" in a single string. So the first substitute
  " uses "ESC / ESC P" and the second one swaps out the "/". It seems like
  " there should be a better way.)
  let b64 = substitute(b64, '/', '\', 'g')
  " Now wrap the whole thing in <start-dcs><start-osc52>...<end-osc52><end-dcs>.
  return "\eP\e]52;c;" . b64 . "\x07\e\x5c"
endfunction

" Kitty versions below 0.22.0 require the clipboard to be flushed before
" accepting a new string.
" https://sw.kovidgoyal.net/kitty/changelog/#id33
function! s:get_OSC52_kitty(str)
  call s:raw_echo("\e]52;c;!\x07")
  return s:get_OSC52(a:str)
endfunction

" Echo a string to the terminal without munging the escape sequences.
function! s:raw_echo(str)
  if has('win32') && has('nvim')
    call chansend(v:stderr, a:str)
  else
    if filewritable('/dev/fd/2')
      call writefile([a:str], '/dev/fd/2', 'b')
    else
      exec("silent! !echo " . shellescape(a:str))
      redraw!
    endif
  endif
endfunction

" Encode a string of bytes in base 64.
" If size is > 0 the output will be line wrapped every `size` chars.
function! s:b64encode(str, size)
  let bytes = s:str2bytes(a:str)
  let b64_arr = []

  for i in range(0, len(bytes) - 1, 3)
    let n = bytes[i] * 0x10000
          \ + get(bytes, i + 1, 0) * 0x100
          \ + get(bytes, i + 2, 0)
    call add(b64_arr, s:b64_table[n / 0x40000])
    call add(b64_arr, s:b64_table[n / 0x1000 % 0x40])
    call add(b64_arr, s:b64_table[n / 0x40 % 0x40])
    call add(b64_arr, s:b64_table[n % 0x40])
  endfor

  if len(bytes) % 3 == 1
    let b64_arr[-1] = '='
    let b64_arr[-2] = '='
  endif

  if len(bytes) % 3 == 2
    let b64_arr[-1] = '='
  endif

  let b64 = join(b64_arr, '')
  if a:size <= 0
    return b64
  endif

  let chunked = ''
  while strlen(b64) > 0
    let chunked .= strpart(b64, 0, a:size) . "\n"
    let b64 = strpart(b64, a:size)
  endwhile

  return chunked
endfunction

function! s:str2bytes(str)
  return map(range(len(a:str)), 'char2nr(a:str[v:val])')
endfunction

" Lookup table for g:oscyank_term.
let s:osc52_table = {
      \ 'default': function('s:get_OSC52'),
      \ 'kitty': function('s:get_OSC52_kitty'),
      \ 'screen': function('s:get_OSC52_DCS'),
      \ 'tmux': function('s:get_OSC52_tmux'),
      \ }

" Lookup table for s:b64encode.
let s:b64_table = [
      \ "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P",
      \ "Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f",
      \ "g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v",
      \ "w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/",
      \ ]

nnoremap <silent> <expr> <Plug>OSCYank OSCYankOperator('')

command! -range OSCYank <line1>,<line2>call OSCYankVisual()
command! -nargs=1 OSCYankReg call OSCYankString(getreg(<f-args>))

" copy after every yank
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | execute 'OSCYankReg "' | endif
