#+TITLE: Server Setup

* Make suure class-utils is in ~lawt

* Add groups

# add {teacher, bot, student} groups
getent group teacher || groupadd teacher;
getent group bot || groupadd bot;
getent group student || groupadd student;

getent group docker || groupadd docker;

* Add initial users

# add users {lawt, autograder, test_08675309}
useradd -m -N -g teacher -G sudo -s /bin/bash -c "Lawton Nichols" -K UID_MIN=1000 -K UID_MAX=1999 -K UMASK=077 lawt
useradd -m -N -g bot -G sudo,docker -s /bin/bash -c "Autograder" -K UID_MIN=1000 -K UID_MAX=1999 -K UMASK=077 autograder
useradd -m -N -g student -s /bin/bash -c "Test Student" -K UID_MIN=2000 -K UMASK=077 test_08675309

echo "Enter password for lawt"
passwd lawt
echo "Enter password for autograder"
passwd autograder
echo "Enter password for test_08675309"
passwd test_08675309

** Add public key to ~/.ssh/authorized_keys

* Update the system

apt update
apt upgrade

* Install required packages

apt install build-essential make gcc g++ gdb clang clang-format vim python3 git default-jdk docker.io quota zip unzip valgrind sshpass ripgrep inotify-tools
apt autoremove;
apt clean;
apt autoclean;
apt autopurge;

systemctl enable docker

** neovim ppa

add-apt-repository ppa:neovim-ppa/stable
apt update
apt install neovim

* Copy skel folder's files into the /etc/skel directory

sudo cp -r config /etc/skel/.config
sudo cp vimrc /etc/skel/.vimrc
you'll need to chmod them after they're there though

* Add files to /etc/profile.d

** umask.sh

#+begin_src bash
umask 077
#+end_src

** welcome.sh

sudo apt install cowsay lolcat

#+begin_src bash
export TERM=xterm-256color
/usr/games/cowsay Welcome to the class server! | /usr/games/lolcat
#+end_src

** do the same in zsh

sudo vim /etc/zsh/zprofile, and add:
#+begin_src bash
. /etc/profile.d/welcome.sh
. /etc/profile.d/umask.sh
#+end_src

* Configure quotas

# https://www.tecmint.com/set-filesystem-disk-quotas-on-ubuntu/
# https://www.digitalocean.com/community/tutorials/how-to-enable-user-and-group-quotas

** Edit /etc/fstab

Add ",usrquota"

mount -o remount /
quotacheck -cum /
quotaon /

** if this doesn't work, you need the generic kernel

apt search linux-image | grep installed
apt search linux-headers | grep installed
you want to get rid of any oracle specific stuff
a generic one should already be installed (if not install
linux-image-generic and linux-headers-generic)
reboot and see if it works this time

** Set the quota for test_08675309

setquota -u test_08675309 100M 110M 0 0 /
quota -vs test_08675309

* Set the timezone

ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

* Set the hostname

hostnamectl set-hostname class-server

* Make required folders and files

mkdir -p ~autograder/bin ~autograder/submissions-graded ~autograder/submissions-to-grade ~autograder/grades;
touch ~autograder/available-assignments;
chown -R autograder:bot ~autograder;
mkdir -p ~lawt/bin;
chown -R lawt:teacher ~lawt/bin;

** Add ~/bin to PATH in and autograder's .bashrc and lawt's .zshrc

* Set up cron (no longer necessary)

run
crontab -e
while logged in as autograder and add:
#+begin_src
# autograde every 10 minutes
# try to run a command, but fail immediately if it's already running
echo "Add the following line:"
echo "*/10 * * * * flock -n /var/lock/autograder.lock /home/autograder/bin/autograde"
#+end_src

* Clone the autograders repo in ~autograder

* Clone the starter code in /

clone it in ~lawt, and then move it to / with sudo

* Remove all permissions to things in ~autograder and ~lawt

cd ~
chmod -R g= * .
chmod -R o= * .

* Set up docker

** Create autograder_working as a template

log in as autograder

docker pull ubuntu:latest
docker run -it --name autograder_working ubuntu:latest
docker start -i autograder_working

apt update
apt install build-essential gcc g++ git gdb vim python3 valgrind tzdata
ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

*** If apt update doesn't work on raspberry pi

https://askubuntu.com/questions/1263284/apt-update-throws-signature-error-in-ubuntu-20-04-container-on-arm
install on HOST, not container:
https://packages.debian.org/sid/libseccomp2
wget latest_libseccomp2
sudo dpkg -i libseccomp2_2.4.3-1+b1_armhf.deb

install latest docker:
sudo apt remove docker docker-engine docker.io containerd runc
sudo apt autoremove
follow https://docs.docker.com/engine/install/debian/
you have to use the convenience script
curl -fsSL https://get.docker.com -o get-docker.sh
sh ./get-docker.sh

** Convert autograder_working container to a reusable image called autograder_template

docker commit autograder_working autograder_template

If you ever overwrite autograder_template, use docker images and
docker image rm to get rid of the old one

** Testing autograder_template

docker run --rm -it autograder_template

** Manually getting stuff off docker

cd ~
docker cp autograder/ autograder_working:/
...
docker cp submission/ autograder_working:/
...
docker cp autograder_working:/autograder/results/results.json .

* systemd service to run the autograder

sudo vim /etc/systemd/system/autograder.service
#+begin_src systemd
[Unit]
Description=Autograder

[Service]
Type=simple
ExecStart=/home/autograder/bin/autograde
Restart=on-failure
RestartSec=5
PIDFile=/tmp/autograder.pid
User=autograder

[Install]
WantedBy=multi-user.target
#+end_src

** Add ssh authorized key to lawt@www.lawtonsclass.com

see oracle-cloud.org

** configure the autograder

Run it manually first, so that you can make sure it's connecting
properly. You might need to type "yes", etc.

sudo systemctl enable --now autograder

to view error output:
sudo journalctl --unit=autograder

** to re-autograde things

just move them to themselves:
mv submission.zip submission.zip

* Git aliases

~alias g=git~ in .zshrc

git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.st status
git config --global alias.c commit

* Run refresh-class-utils.sh

* Bash script snippets

** Make sure a bash script runs as root

#+begin_src bash
#/bin/bash

if [[ $UID != 0 ]]; then
    echo "Please run this script with sudo:"
    echo "sudo $0 $*"
    exit 1
fi
#+end_src

** Make sure a bash script runs using its containing directory as the cwd

#+begin_src bash
# make sure we're in the directory containing the other scripts
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
cd $DIR
#+end_src
